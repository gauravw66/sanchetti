import openai
from qdrant_client import QdrantClient
import os
from dotenv import load_dotenv

load_dotenv()



# Set up your OpenAI API key
openai.api_key = os.environ.get("OPENAI_API_KEY")

# Initialize Qdrant client
client = QdrantClient(url=os.environ.get("QDRANT_URL") , api_key= os.environ.get("QDRANT_API_KEY"))

# Function to handle the search and summarization process
def search_and_summarize(query):
    # Generate the embedding for the query using OpenAI's text-embedding-ada-002 model
    response = openai.Embedding.create(
        input=query, 
        model="text-embedding-3-small"
    )

    # Extract the embedding vector from the OpenAI response
    question_vector = response['data'][0]['embedding']

    # Perform the search in your Qdrant collection using the embedding
    search_results = client.search(
        collection_name="sanchetti",
        query_vector=question_vector,  # Already a list of floats
        limit=5  # Retrieve 5 results
    )

    # Initialize a list to collect all relevant contents from the 5 results
    all_combined_content = ""

    # Extract relevant information from the search results
    for result in search_results:
        # Access the payload attribute from the result object
        payload = result.payload
        
        # Extract the title, description, and markdown
        title = payload.get('title', 'No title available')
        description = payload.get('description', 'No description available')
        markdown = payload.get('markdown', 'No additional information')
        
        # Combine the description and markdown for better context
        combined_content = f"Title: {title}\nDescription: {description}\nAdditional Info: {markdown}\n\n"
        
        # Add the combined content to the overall collection
        all_combined_content += combined_content

    # Now pass the combined content and original query to GPT-3.5 for summarization
    summary_response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "You are a summarizer. Your task is to summarize search results in a clean and concise manner, considering the original query and all the results."
            },
            {
                "role": "user",
                "content": f"Original Query: {query}\n\nSearch Results:\n{all_combined_content}"
            }
        ]
    )

    # Extract the summary generated by GPT-3.5
    summary = summary_response['choices'][0]['message']['content']

    # Return the final summarized output
    return f"Original Query: {query}\n{summary}\n"

# Main loop to repeatedly ask for queries
while True:
    # Prompt the user for the next query
    query = input("Enter your query (or type 'exit' to quit): ")
    
    # If the user types 'exit', break the loop
    if query.lower() == 'exit':
        print("Exiting the program. Goodbye!")
        break

    # Call the function to search and summarize the query
    result = search_and_summarize(query)
    
    # Print the summarized result
    print(result)
